services:
  frontend:
    container_name: frontend
    build:
      context: ./apps/frontend
      target: local
    depends_on:
      - backend
    volumes:
      - ./apps/frontend:/app
      - ./node_modules:/node_modules
    environment:
      - ./apps/frontend/.env.development
    ports:
      - "5173:5173"
    networks:
      - acap-network

  backend:
    container_name: backend
    build:
      context: ./apps/backend
      target: local
    volumes:
      - ./apps/backend:/app
      - ./node_modules:/node_modules
    depends_on:
      - mongo
      - minio
      - keydb
      - msbridge
    env_file:
      - ./apps/backend/env/.env
    ports:
      - 3001:3001
    networks:
      - acap-network

  msbridge:
    container_name: msbridge
    build:
      context: ./apps/ms-bridge
      target: local
    volumes:
      - ./apps/ms-bridge:/app
      - ./node_modules:/node_modules
    depends_on:
      - keydb
      - kafka
      - mosquitto
    env_file:
      - ./apps/ms-bridge/env/.env
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    ports:
      - 3002:3002
    networks:
      - acap-network

  keydb:
    image: eqalpha/keydb
    container_name: keydb
    ports:
      - 6379:6379
    volumes:
      - keydb_data:/data
      - ./apps/ms-bridge/keydb.conf:/usr/local/etc/keydb/keydb.conf
    command: keydb-server /usr/local/etc/keydb/keydb.conf
    networks:
      - acap-network

  mongo:
    command: mongod --quiet --wiredTigerCacheSizeGB 1.5 --logpath /dev/null
    image: mongo
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
      - MONGO_INITDB_DATABASE=ACAP
    volumes:
      - mongo_data:/data/db
    ports:
      - 27017:27017
    networks:
      - acap-network

  minio:
    image: "bitnami/minio:latest"
    container_name: minio
    ports:
      - "9000:9000"
      - "9002:9001" # the web client port
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio2024
      - MINIO_SKIP_CLIENT=yes
      - MINIO_DEFAULT_BUCKETS=acap
    volumes:
      - minio_data:/bitnami/minio/data
    networks:
      - acap-network

  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    ports:
      - 1883:1883
      - 9001:9001
    volumes:
      - mosquitto_data:/mosquitto/data
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_log:/mosquitto/log
    networks:
      - acap-network

  kafka:
    image: 'bitnami/kafka'
    container_name: kafka
    ports:
      - '9092:9092'
      - '9093:9093'
    volumes:
      - kafka_data:/bitnami/kafka
    command: /bin/sh -c "exec /opt/bitnami/scripts/kafka/run.sh > /dev/null 2>&1"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LOG4J_LOGGERS=kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
      - KAFKA_LOG4J_ROOT_LOGLEVEL=WARN
    networks:
      - acap-network

volumes:
  mongo_data:
  minio_data:
  keydb_data:
  kafka_data:
  mosquitto_data:
  mosquitto_config:
  mosquitto_log:

networks:
  acap-network:
    driver: bridge
